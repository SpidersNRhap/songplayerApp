package com.example.songplayer;

import android.graphics.Bitmap;
import android.app.Service;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Intent;
import android.content.Context;
import android.media.MediaPlayer;
import android.os.Binder;
import android.os.Build;
import android.os.IBinder;
import java.util.List;
import java.util.Random;
import android.graphics.BitmapFactory;
import android.content.SharedPreferences;

import com.example.songplayer.MainActivity;

import android.util.Log;

import android.support.v4.media.session.MediaSessionCompat;
import android.support.v4.media.session.PlaybackStateCompat;
import android.support.v4.media.MediaMetadataCompat;
import androidx.core.app.NotificationCompat;
import androidx.media.session.MediaButtonReceiver;

public class MusicService extends Service {
    private final IBinder binder = new LocalBinder();
    private MediaPlayer mediaPlayer;
    private List<String> playlist;
    private int currentIndex = 0;
    private boolean isShuffle = false, isLoop = false;
    private final Random random = new Random();
    private PlaybackListener playbackListener;
    private MediaSessionCompat mediaSession;

    private static final int NOTIFICATION_ID = 1001;
    private static final String CHANNEL_ID = "media_playback_channel";

    private Bitmap currentAlbumArt = null;
    private Bitmap defaultAlbumArt;

    private String publicIp, port, apiKey, token;

    public class LocalBinder extends Binder {
        public MusicService getService() { return MusicService.this; }
    }

    @Override
    public IBinder onBind(Intent intent) { return binder; }

    @Override
    public void onCreate() {
        super.onCreate();
        mediaSession = new MediaSessionCompat(getApplicationContext(), "SongPlayerSession");
        mediaSession.setCallback(new MediaSessionCompat.Callback() {
            @Override
            public void onPlay() {
                play();
            }
            @Override
            public void onPause() {
                pause();
            }
            @Override
            public void onSkipToNext() {
                int next = getNextIndex();
                if (next != -1) {
                    currentIndex = next;
                    savePlaybackState();
                    playCurrent();
                }
            }
            @Override
            public void onSkipToPrevious() {
                int prev = getPreviousIndex();
                if (prev != -1) {
                    currentIndex = prev;
                    savePlaybackState();
                    playCurrent();
                }
            }
        });
        mediaSession.setActive(true);
        defaultAlbumArt = BitmapFactory.decodeResource(getResources(), R.drawable.default_art);
        createNotificationChannel();

        SharedPreferences prefs = getSharedPreferences("music_service_prefs", MODE_PRIVATE);
        currentIndex = prefs.getInt("currentIndex", 0);
        String playlistStr = prefs.getString("playlist", null);
        if (playlistStr != null) {
            playlist = java.util.Arrays.asList(playlistStr.split(";;"));
        }

        // Fetch token on service startup
        // fetchToken(new TokenCallback() {
        //     @Override
        //     public void onTokenReceived(String token) {
        //         Log.d("SongPlayerDBG", "Token fetched on service start: " + token);
        //     }
        //     @Override
        //     public void onTokenError(Exception e) {
        //         Log.e("SongPlayerDBG", "Token fetch error on service start", e);
        //     }
        // });
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        MediaButtonReceiver.handleIntent(mediaSession, intent);
        return START_STICKY;
    }

    public void setPlaylist(List<String> urls, int index, boolean shuffle, boolean loop) {
        Log.d("SongPlayerDBG", "MusicService.setPlaylist() called, index=" + index + ", urls=" + urls.size());
        this.playlist = urls;
        this.currentIndex = index;
        this.isShuffle = shuffle;
        this.isLoop = loop;
        savePlaybackState(); // <-- Save state when playlist is set
        playCurrent();
    }
    public void setShuffle(boolean shuffle) {
        isShuffle = shuffle;
    }
    public void setLoop(boolean loop) {
        isLoop = loop;
    }
    public boolean isShuffle() { return isShuffle; }
    public boolean isLoop() { return isLoop; }

    private void createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel channel = new NotificationChannel(
                    CHANNEL_ID,
                    "Media Playback",
                    NotificationManager.IMPORTANCE_LOW
            );
            NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
            if (manager != null) {
                manager.createNotificationChannel(channel);
            }
        }
    }

    private void showMediaNotification(boolean isPlaying, String title) {
        Bitmap albumArt = currentAlbumArt;
        if (albumArt == null) {
            albumArt = defaultAlbumArt;
        }
        Intent intent = new Intent(getApplicationContext(), MainActivity.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
        PendingIntent contentIntent = PendingIntent.getActivity(
                this, 0, intent,
                PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE
        );

        int playPauseIcon = isPlaying ? android.R.drawable.ic_media_pause : android.R.drawable.ic_media_play;
        String playPauseText = isPlaying ? "Pause" : "Play";

        NotificationCompat.Builder builder = new NotificationCompat.Builder(getApplicationContext(), CHANNEL_ID)
                .setSmallIcon(R.drawable.ic_music_note) // Use your app icon or a transparent icon here
                .setContentTitle(title != null ? title : "Playing")
                .setContentIntent(contentIntent)
                .addAction(new NotificationCompat.Action(
                        android.R.drawable.ic_media_previous, "Previous",
                        MediaButtonReceiver.buildMediaButtonPendingIntent(getApplicationContext(), PlaybackStateCompat.ACTION_SKIP_TO_PREVIOUS)))
                .addAction(new NotificationCompat.Action(
                        playPauseIcon, playPauseText,
                        MediaButtonReceiver.buildMediaButtonPendingIntent(getApplicationContext(), isPlaying ? PlaybackStateCompat.ACTION_PAUSE : PlaybackStateCompat.ACTION_PLAY)))
                .addAction(new NotificationCompat.Action(
                        android.R.drawable.ic_media_next, "Next",
                        MediaButtonReceiver.buildMediaButtonPendingIntent(getApplicationContext(), PlaybackStateCompat.ACTION_SKIP_TO_NEXT)))
                .setStyle(new androidx.media.app.NotificationCompat.MediaStyle()
                        .setMediaSession(mediaSession.getSessionToken())
                        .setShowActionsInCompactView(0, 1, 2)
                        .setShowCancelButton(false)
                )
                .setOngoing(isPlaying)
                .setOnlyAlertOnce(true)
                .setPriority(NotificationCompat.PRIORITY_LOW);

        // Set album art as large icon and background if available
        MediaMetadataCompat.Builder metaBuilder = new MediaMetadataCompat.Builder()
            .putString(MediaMetadataCompat.METADATA_KEY_TITLE, title);
        if (albumArt != null) {
            metaBuilder.putBitmap(MediaMetadataCompat.METADATA_KEY_ALBUM_ART, albumArt);
        }
        mediaSession.setMetadata(metaBuilder.build());
        Notification notification = builder.build();
        startForeground(NOTIFICATION_ID, notification);
    }

    private void updateNotification() {
        String title = "Playing";
        if (playlist != null && !playlist.isEmpty()) {
            String url = playlist.get(currentIndex);
            title = extractSongTitle(url);
        }
        showMediaNotification(isPlaying(), title);
    }
    private String extractSongTitle(String url) {
    // Remove query string
        int q = url.indexOf('?');
        if (q != -1) url = url.substring(0, q);

        // Get filename after last slash
        int lastSlash = url.lastIndexOf('/');
        String title = (lastSlash != -1 && lastSlash < url.length() - 1) ? url.substring(lastSlash + 1) : url;

        // Decode URL encoding
        try {
            title = java.net.URLDecoder.decode(title, "UTF-8");
        } catch (Exception ignored) {}

        // Remove known audio extension
        String[] exts = {".mp3", ".wav", ".flac", ".aac", ".ogg", ".m4a"};
        for (String ext : exts) {
            if (title.toLowerCase().endsWith(ext)) {
                title = title.substring(0, title.length() - ext.length());
                break;
            }
        }
        return title;
    }

    private void playCurrent() {
        stop();
        if (playlist == null || playlist.isEmpty()) return;
        String url = playlist.get(currentIndex);

        String title = extractSongTitle(url);

        // Always reload album art for the current song
        Bitmap albumArt = getAlbumArt(url);
        currentAlbumArt = albumArt; // <-- This will be null if no art is found

        mediaPlayer = new MediaPlayer();
        try {
            mediaPlayer.setDataSource(url);
            mediaPlayer.setOnPreparedListener(mp -> {
                mp.start();
                mediaSession.setPlaybackState(new PlaybackStateCompat.Builder()
                    .setActions(getAvailableActions())
                    .setState(PlaybackStateCompat.STATE_PLAYING, getCurrentPosition(), 1.0f)
                    .build());
                updateNotification();
                if (playbackListener != null) {
                    playbackListener.onTrackChanged(currentIndex, title);
                    playbackListener.onPlaybackStarted();
                }
            });
            mediaPlayer.setOnCompletionListener(mp -> {
                int next = getNextIndex();
                if (next != -1) {
                    currentIndex = next;
                    playCurrent();
                } else {
                    stop();
                    mediaSession.setPlaybackState(new PlaybackStateCompat.Builder()
                        .setActions(getAvailableActions())
                        .setState(PlaybackStateCompat.STATE_PAUSED, getCurrentPosition(), 1.0f)
                        .build());
                    updateNotification();
                }
            });
            mediaPlayer.setOnErrorListener((mp, what, extra) -> {
                Log.e("SongPlayerDBG", "MediaPlayer error: " + what + ", " + extra);
                stop();
                mediaSession.setPlaybackState(new PlaybackStateCompat.Builder()
                    .setActions(getAvailableActions())
                    .setState(PlaybackStateCompat.STATE_ERROR, 0, 1.0f)
                    .build());
                updateNotification();
                stopForeground(false);
                if (playbackListener != null) playbackListener.onPlaybackPaused();
                return true;
            });
            mediaPlayer.prepareAsync();
        } catch (Exception e) {
            stop();
            mediaSession.setPlaybackState(new PlaybackStateCompat.Builder()
                .setActions(getAvailableActions())
                .setState(PlaybackStateCompat.STATE_ERROR, 0, 1.0f)
                .build());
            updateNotification();
            stopForeground(false);
        }

        // Set metadata with albumArt (will be null if no art)
        MediaMetadataCompat.Builder metaBuilder = new MediaMetadataCompat.Builder()
            .putString(MediaMetadataCompat.METADATA_KEY_TITLE, title);
        if (albumArt != null) {
            metaBuilder.putBitmap(MediaMetadataCompat.METADATA_KEY_ALBUM_ART, albumArt);
        }
        mediaSession.setMetadata(metaBuilder.build());
    }

    private int getNextIndex() {
        if (playlist == null || playlist.isEmpty()) return -1;
        if (isShuffle) {
            if (playlist.size() == 1) return currentIndex;
            int next;
            do {
                next = random.nextInt(playlist.size());
            } while (next == currentIndex);
            return next;
        } else if (currentIndex < playlist.size() - 1) {
            return currentIndex + 1;
        } else if (isLoop) {
            return 0;
        }
        return -1;
    }

    private int getPreviousIndex() {
        if (playlist == null || playlist.isEmpty()) return -1;
        if (isShuffle) {
            if (playlist.size() == 1) return currentIndex;
            int prev;
            do {
                prev = random.nextInt(playlist.size());
            } while (prev == currentIndex);
            return prev;
        } else if (currentIndex > 0) {
            return currentIndex - 1;
        } else if (isLoop) {
            return playlist.size() - 1;
        }
        return -1;
    }

    public void play() {
        if (mediaPlayer != null && !mediaPlayer.isPlaying()) {
            mediaPlayer.start();
            mediaSession.setPlaybackState(new PlaybackStateCompat.Builder()
                .setActions(getAvailableActions())
                .setState(PlaybackStateCompat.STATE_PLAYING, getCurrentPosition(), 1.0f)
                .build());
            updateNotification();
            if (playbackListener != null) playbackListener.onPlaybackStarted();
        }
    }

    public void pause() {
        if (mediaPlayer != null && mediaPlayer.isPlaying()) {
            mediaPlayer.pause();
            mediaSession.setPlaybackState(new PlaybackStateCompat.Builder()
                .setActions(getAvailableActions())
                .setState(PlaybackStateCompat.STATE_PAUSED, getCurrentPosition(), 1.0f)
                .build());
            updateNotification();
            // Do NOT call stopForeground(false) here!
            if (playbackListener != null) playbackListener.onPlaybackPaused();
        }
    }

    public void seekTo(int pos) {
        Log.d("SongPlayerDBG", "MusicService.seekTo(" + pos + ")");
        if (mediaPlayer != null) mediaPlayer.seekTo(pos);
    }

    public boolean isPlaying() { return mediaPlayer != null && mediaPlayer.isPlaying(); }
    public int getCurrentPosition() { return mediaPlayer != null ? mediaPlayer.getCurrentPosition() : 0; }
    public int getDuration() { return mediaPlayer != null ? mediaPlayer.getDuration() : 0; }

    public void stop() {
        if (mediaPlayer != null) {
            mediaPlayer.release();
            mediaPlayer = null;
        }
    }

    public int getCurrentIndex() {
        return currentIndex;
    }
    public boolean isSamePlaylist(List<String> urls) {
        if (playlist == null || urls == null || playlist.size() != urls.size()) return false;
        for (int i = 0; i < playlist.size(); i++) {
            if (!playlist.get(i).equals(urls.get(i))) return false;
        }
        return true;
    }

    public void setPlaybackListener(PlaybackListener listener) {
        this.playbackListener = listener;
    }

    private long getAvailableActions() {
        return PlaybackStateCompat.ACTION_PLAY |
                PlaybackStateCompat.ACTION_PAUSE |
                PlaybackStateCompat.ACTION_SKIP_TO_NEXT |
                PlaybackStateCompat.ACTION_SKIP_TO_PREVIOUS |
                PlaybackStateCompat.ACTION_PLAY_PAUSE |
                PlaybackStateCompat.ACTION_SEEK_TO;
    }

    public void playNext() {
        int next = getNextIndex();
        if (next != -1) {
            currentIndex = next;
            savePlaybackState(); // <-- Save state when index changes
            playCurrent();
        }
    }

    public void playPrevious() {
        int prev = getPreviousIndex();
        if (prev != -1) {
            currentIndex = prev;
            savePlaybackState(); // <-- Save state when index changes
            playCurrent();
        }
    }

    public void setPlaylistWithArt(List<String> urls, int index, boolean shuffle, boolean loop, Bitmap albumArt) {
        Log.d("SongPlayerDBG", "MusicService.setPlaylistWithArt() called, index=" + index + ", urls=" + urls.size());
        this.playlist = urls;
        this.currentIndex = index;
        this.isShuffle = shuffle;
        this.isLoop = loop;
        this.currentAlbumArt = albumArt;
        savePlaybackState(); // <-- Save state when playlist is set
        playCurrent();
    }

    public void updateNotificationArt(Bitmap albumArt) {
        this.currentAlbumArt = albumArt; // store it if needed
        updateNotification(); // your method to refresh the notification UI
    }

    private void savePlaybackState() {
        SharedPreferences prefs = getSharedPreferences("music_service_prefs", MODE_PRIVATE);
        SharedPreferences.Editor editor = prefs.edit();
        editor.putInt("currentIndex", currentIndex);
        // Save playlist as a joined string (simple, for local file paths/URLs)
        if (playlist != null) {
            editor.putString("playlist", android.text.TextUtils.join(";;", playlist));
        }
        editor.apply();
    }

    public void setServerConfig(String publicIp, String port, String apiKey) {
        this.publicIp = publicIp;
        this.port = port;
        this.apiKey = apiKey;

        // Fetch token now that config is set
        fetchToken(new TokenCallback() {
            @Override
            public void onTokenReceived(String token) {
                Log.d("SongPlayerDBG", "Token fetched after config: " + token);
            }
            @Override
            public void onTokenError(Exception e) {
                Log.e("SongPlayerDBG", "Token fetch error after config", e);
            }
        });
    }

    public void playSongByPath(List<SongNode> playlistNodes, int index, boolean shuffle, boolean loop, PlaySongCallback callback) {
        fetchToken(new TokenCallback() {
            @Override
            public void onTokenReceived(String token) {
                List<String> playlistUrls = new java.util.ArrayList<>();
                for (SongNode node : playlistNodes) {
                    String nodePath = node.path;
                    int lastSlash = nodePath.lastIndexOf('/');
                    String url;
                    try {
                        if (lastSlash != -1) {
                            String folder = java.net.URLEncoder.encode(nodePath.substring(0, lastSlash), "UTF-8").replace("+", "%20");
                            String filename = java.net.URLEncoder.encode(nodePath.substring(lastSlash + 1), "UTF-8").replace("+", "%20");
                            url = "https://" + publicIp + ":" + port + "/stream/" + folder + "/" + filename + "?token=" + token;
                        } else {
                            String filename = java.net.URLEncoder.encode(nodePath, "UTF-8").replace("+", "%20");
                            url = "https://" + publicIp + ":" + port + "/stream/" + filename + "?token=" + token;
                        }
                    } catch (Exception e) {
                        url = "";
                    }
                    playlistUrls.add(url);
                }
                setPlaylistWithArt(playlistUrls, index, shuffle, loop, null);
                if (callback != null) callback.onPlayStarted(playlistUrls.get(index));
            }
            @Override
            public void onTokenError(Exception e) {
                Log.e("SongPlayerDBG", "Token fetch error", e); // Add this line
                if (callback != null) callback.onPlayError(e);
            }
        });
    }

    // Token fetcher
    public void fetchToken(TokenCallback callback) {
        new Thread(() -> {
            try {
                okhttp3.OkHttpClient client = MainActivity.getUnsafeOkHttpClientStatic();
                String tokenUrl = "https://" + publicIp + ":" + port + "/token?apiKey=" + apiKey;
                okhttp3.Request request = new okhttp3.Request.Builder().url(tokenUrl).build();
                okhttp3.Response response = client.newCall(request).execute();
                String body = response.body() != null ? response.body().string() : "";
                if (response.isSuccessful()) {
                    com.google.gson.JsonObject json = com.google.gson.JsonParser.parseString(body).getAsJsonObject();
                    token = json.get("token").getAsString();
                    Log.d("SongPlayerDBG", "Fetched token: " + token); // Add this line
                    callback.onTokenReceived(token);
                    if (tokenListener != null) {
                        tokenListener.onTokenUpdated(token);
                    }
                } else {
                    callback.onTokenError(new Exception("Token error: HTTP " + response.code()));
                }
            } catch (Exception e) {
                callback.onTokenError(e);
            }
        }).start();
    }

    // Callback interfaces
    public interface TokenCallback {
        void onTokenReceived(String token);
        void onTokenError(Exception e);
    }
    public interface PlaySongCallback {
        void onPlayStarted(String streamUrl);
        void onPlayError(Exception e);
    }

    public interface PlaybackListener {
        void onPlaybackStarted();
        void onPlaybackPaused();
        void onTrackChanged(int newIndex, String songTitle);

    }

    private Bitmap getAlbumArt(String url) {
        try {
            android.media.MediaMetadataRetriever mmr = new android.media.MediaMetadataRetriever();
            mmr.setDataSource(url, new java.util.HashMap<>());
            byte[] art = mmr.getEmbeddedPicture();
            mmr.release();
            if (art != null) {
                android.graphics.BitmapFactory.Options options = new android.graphics.BitmapFactory.Options();
                options.inPreferredConfig = android.graphics.Bitmap.Config.ARGB_8888;
                // Do NOT scale here—return the full-res bitmap
                return android.graphics.BitmapFactory.decodeByteArray(art, 0, art.length, options);
            }
        } catch (Exception ignored) {}
        return null;
    }

    public interface TokenListener {
        void onTokenUpdated(String token);
    }

    private TokenListener tokenListener;

    public void setTokenListener(TokenListener listener) {
        this.tokenListener = listener;
    }
}