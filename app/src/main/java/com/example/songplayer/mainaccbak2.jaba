// package com.example.songplayer;

// import android.app.NotificationChannel;
// import android.app.NotificationManager;
// import android.content.ComponentName;
// import android.content.Context;
// import android.content.Intent;
// import android.content.ServiceConnection;
// import android.media.MediaMetadataRetriever;
// import android.os.Bundle;
// import android.os.Handler;
// import android.os.IBinder;
// import android.widget.ImageButton;
// import android.widget.SeekBar;
// import android.widget.TextView;
// import androidx.appcompat.app.AppCompatActivity;
// import androidx.recyclerview.widget.LinearLayoutManager;
// import androidx.recyclerview.widget.RecyclerView;
// import com.google.gson.Gson;
// import com.google.gson.JsonObject;
// import com.google.gson.JsonParser;
// import okhttp3.*;
// import java.io.IOException;
// import java.net.URLEncoder;
// import java.security.cert.CertificateException;
// import java.util.*;
// import javax.net.ssl.*;
// import android.view.View;
// import android.util.Log;

// public class MainActivity extends AppCompatActivity {
//     private ImageButton pauseButton;
//     private String publicIp, port, apiKey, token;
//     private TextView statusText, songTitle;
//     private RecyclerView songList;
//     private SongAdapter adapter;
//     private List<SongNode> currentNodes = new ArrayList<>();
//     private Stack<List<SongNode>> navStack = new Stack<>();
//     private String currentSongPath = null;
//     private List<String> playlistNames = new ArrayList<>();
//     private Map<String, List<SongNode>> playlists = new HashMap<>();
//     private List<SongNode> currentPlaylist = new ArrayList<>();
//     private int currentSongIndex = 0;
//     private SeekBar progressBar;
//     private Handler progressHandler = new Handler();
//     private Runnable progressRunnable;
//     private TextView songMeta;
//     private RecyclerView playlistList;
//     private PlaylistAdapter playlistAdapter;
//     private TextView currentTime;
//     private TextView totalTime;
//     private List<SongNode> allSongNodes = new ArrayList<>();
//     private boolean isShuffle = false;
//     private boolean isLoop = false;
//     private ImageButton shuffleButton;
//     private ImageButton loopButton;
//     private final Random random = new Random();
//     private RecyclerView playlistSongsList;
//     private PlaylistSongsAdapter playlistSongsAdapter;
//     private String selectedPlaylistName = null;

//     // Service binding
//     private MusicService musicService;
//     private boolean serviceBound = false;
//     private String pendingSongPath = null;
//     private String pendingToken = null;

//     private final ServiceConnection serviceConnection = new ServiceConnection() {
//         @Override
//         public void onServiceConnected(ComponentName name, IBinder service) {
//             Log.d("SongPlayerDBG", "Service connected");
//             MusicService.LocalBinder binder = (MusicService.LocalBinder) service;
//             musicService = binder.getService();
//             serviceBound = true;
//             // Set playback listener
//             musicService.setPlaybackListener(() -> runOnUiThread(() -> {
//                 updatePauseButtonAndStatus();
//                 startProgressUpdater();
//             }));
//             // If there was a pending playSong, call it now
//             if (pendingSongPath != null && pendingToken != null) {
//                 playSong(pendingSongPath, pendingToken);
//                 pendingSongPath = null;
//                 pendingToken = null;
//             }
//             // Sync pause button and status with actual playback state
//             updatePauseButtonAndStatus();
//         }
//         @Override
//         public void onServiceDisconnected(ComponentName name) {
//             Log.d("SongPlayerDBG", "Service disconnected");
//             serviceBound = false;
//         }
//     };

//     @Override
//     protected void onCreate(Bundle savedInstanceState) {
//         if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
//             NotificationManager notificationManager = getSystemService(NotificationManager.class);
//             NotificationChannel channel = new NotificationChannel(
//                     "media_channel", "Media Playback", NotificationManager.IMPORTANCE_DEFAULT);
//             notificationManager.createNotificationChannel(channel);
//         }
//         super.onCreate(savedInstanceState);
//         setContentView(R.layout.activity_main);

//         // Bind to MusicService
//         Intent intent = new Intent(this, MusicService.class);
//         bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE);

//         statusText = findViewById(R.id.statusText);
//         songTitle = findViewById(R.id.songTitle);
//         songList = findViewById(R.id.songList);
//         pauseButton = findViewById(R.id.pauseButton);
//         songMeta = findViewById(R.id.songMeta);
//         progressBar = findViewById(R.id.progressBar);
//         playlistList = findViewById(R.id.playlistList);
//         currentTime = findViewById(R.id.currentTime);
//         totalTime = findViewById(R.id.totalTime);
//         playlistSongsList = findViewById(R.id.playlistSongsList);
//         songList.setVisibility(View.VISIBLE);
//         playlistSongsList.setVisibility(View.GONE);

//         ImageButton nextButton = findViewById(R.id.nextButton);
//         ImageButton prevButton = findViewById(R.id.prevButton);

//         shuffleButton = findViewById(R.id.shuffleButton);
//         loopButton = findViewById(R.id.loopButton);

//         nextButton.setOnClickListener(v -> playNextSong());
//         prevButton.setOnClickListener(v -> playPreviousSong());

//         shuffleButton.setOnClickListener(v -> {
//             isShuffle = !isShuffle;
//             shuffleButton.setAlpha(isShuffle ? 1.0f : 0.5f);
//         });

//         loopButton.setOnClickListener(v -> {
//             isLoop = !isLoop;
//             loopButton.setAlpha(isLoop ? 1.0f : 0.5f);
//         });

//         pauseButton.setOnClickListener(v -> {
//             if (serviceBound && musicService != null) {
//                 if (musicService.isPlaying()) {
//                     musicService.pause();
//                     pauseButton.setImageResource(android.R.drawable.ic_media_play);
//                     statusText.setText("Status: Paused");
//                 } else {
//                     musicService.play();
//                     pauseButton.setImageResource(android.R.drawable.ic_media_pause);
//                     statusText.setText("Status: Playing");
//                     startProgressUpdater();
//                 }
//             }
//         });

//         progressBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
//             @Override public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
//                 if (fromUser && serviceBound && musicService != null) {
//                     musicService.seekTo(progress);
//                 }
//             }
//             @Override public void onStartTrackingTouch(SeekBar seekBar) {}
//             @Override public void onStopTrackingTouch(SeekBar seekBar) {}
//         });

//         publicIp = BuildConfig.PUBLIC_IP;
//         port = BuildConfig.PORT;
//         apiKey = BuildConfig.API_KEY;

//         adapter = new SongAdapter(currentNodes, new SongAdapter.OnSongClickListener() {
//             @Override
//             public void onSongClick(SongNode song) {
//                 currentSongPath = song.path;
//                 currentPlaylist = new ArrayList<>();
//                 currentPlaylist.add(song);
//                 currentSongIndex = 0;
//                 fetchTokenAndPlay(song.path);
//             }
//             @Override
//             public void onFolderClick(SongNode folder) {
//                 navStack.push(currentNodes);
//                 setSongList(folder.children);
//             }
//         });
//         songList.setLayoutManager(new LinearLayoutManager(this));
//         songList.setAdapter(adapter);

//         playlistSongsAdapter = new PlaylistSongsAdapter(new ArrayList<>(), (position, song) -> {
//             currentPlaylist = playlists.get(selectedPlaylistName);
//             currentSongIndex = position;
//             playSong(song.path, token);
//         });
//         playlistSongsList.setLayoutManager(new LinearLayoutManager(this));
//         playlistSongsList.setAdapter(playlistSongsAdapter);

//         fetchTokenAndThenSongs();
//     }

//     @Override
//     protected void onDestroy() {
//         super.onDestroy();
//         progressHandler.removeCallbacksAndMessages(null);
//         if (serviceBound) {
//             unbindService(serviceConnection);
//             serviceBound = false;
//         }
//     }

//     private void updatePauseButtonAndStatus() {
//         if (serviceBound && musicService != null && musicService.isPlaying()) {
//             pauseButton.setImageResource(android.R.drawable.ic_media_pause);
//             statusText.setText("Status: Playing");
//         } else {
//             pauseButton.setImageResource(android.R.drawable.ic_media_play);
//             statusText.setText("Status: Paused");
//         }
//     }

//     private void setSongList(List<SongNode> nodes) {
//         currentNodes = nodes;
//         adapter.setItems(nodes);
//     }

//     private void fetchTokenAndPlay(String songPath) {
//         statusText.setText("Fetching token...");
//         OkHttpClient client = getUnsafeOkHttpClient();
//         String tokenUrl = "https://" + publicIp + ":" + port + "/token?apiKey=" + apiKey;
//         Request request = new Request.Builder().url(tokenUrl).build();
//         client.newCall(request).enqueue(new okhttp3.Callback() {
//             @Override public void onFailure(Call call, IOException e) {
//                 runOnUiThread(() -> statusText.setText("Token error (network): " + e.getMessage()));
//             }
//             @Override public void onResponse(Call call, Response response) throws IOException {
//                 String body = response.body() != null ? response.body().string() : "";
//                 if (response.isSuccessful()) {
//                     try {
//                         JsonObject json = JsonParser.parseString(body).getAsJsonObject();
//                         token = json.get("token").getAsString();
//                         runOnUiThread(() -> playSong(songPath, token));
//                     } catch (Exception e) {
//                         runOnUiThread(() -> statusText.setText("Token parse error: " + e.getMessage() + " Body: " + body));
//                     }
//                 } else {
//                     runOnUiThread(() -> statusText.setText("Token error: HTTP " + response.code() + " Body: " + body));
//                 }
//             }
//         });
//     }

//     private void fetchSongTree() {
//         statusText.setText("Loading songs...");
//         OkHttpClient client = getUnsafeOkHttpClient();
//         String url = "https://" + publicIp + ":" + port + "/songs?token=" + token;
//         Request request = new Request.Builder().url(url).build();
//         client.newCall(request).enqueue(new okhttp3.Callback() {
//             @Override public void onFailure(Call call, IOException e) {
//                 runOnUiThread(() -> statusText.setText("Failed to load songs (network): " + e.getMessage()));
//             }
//             @Override public void onResponse(Call call, Response response) throws IOException {
//                 String body = response.body() != null ? response.body().string() : "";
//                 if (response.isSuccessful()) {
//                     Gson gson = new Gson();
//                     SongNode[] nodes = gson.fromJson(body, SongNode[].class);
//                     runOnUiThread(() -> {
//                         allSongNodes = Arrays.asList(nodes);
//                         setSongList(allSongNodes);
//                         fetchPlaylists();
//                     });
//                 } else if (response.code() == 403) {
//                     runOnUiThread(() -> statusText.setText("Songs 403: Token expired or invalid. Body: " + body));
//                     runOnUiThread(() -> fetchTokenAndThenSongs());
//                 } else {
//                     runOnUiThread(() -> statusText.setText("Failed to load songs: HTTP " + response.code() + " Body: " + body));
//                 }
//             }
//         });
//     }

//     private void fetchTokenAndThenSongs() {
//         statusText.setText("Fetching token...");
//         OkHttpClient client = getUnsafeOkHttpClient();
//         String tokenUrl = "https://" + publicIp + ":" + port + "/token?apiKey=" + apiKey;
//         Request request = new Request.Builder().url(tokenUrl).build();
//         client.newCall(request).enqueue(new okhttp3.Callback() {
//             @Override public void onFailure(Call call, IOException e) {
//                 runOnUiThread(() -> statusText.setText("Token error: " + e.getMessage()));
//             }
//             @Override public void onResponse(Call call, Response response) throws IOException {
//                 if (response.isSuccessful()) {
//                     try {
//                         String body = response.body().string();
//                         JsonObject json = JsonParser.parseString(body).getAsJsonObject();
//                         token = json.get("token").getAsString();
//                         runOnUiThread(() -> {
//                             fetchSongTree();
//                             fetchPlaylists();
//                         });
//                     } catch (Exception e) {
//                         runOnUiThread(() -> statusText.setText("Token error: " + e.getMessage()));
//                     }
//                 } else {
//                     runOnUiThread(() -> statusText.setText("Token error: HTTP " + response.code()));
//                 }
//             }
//         });
//     }

//     private void playSong(String songPath, String token) {
//         if (!serviceBound || musicService == null) {
//             Log.d("SongPlayerDBG", "Service not bound, deferring playSong for: " + songPath);
//             pendingSongPath = songPath;
//             pendingToken = token;
//             return;
//         }
//         Log.d("SongPlayerDBG", "playSong called: " + songPath);
//         try {
//             List<String> playlistUrls = new ArrayList<>();
//             for (SongNode node : currentPlaylist) {
//                 String nodePath = node.path;
//                 int lastSlash = nodePath.lastIndexOf('/');
//                 String url;
//                 if (lastSlash != -1) {
//                     String folder = URLEncoder.encode(nodePath.substring(0, lastSlash), "UTF-8").replace("+", "%20");
//                     String filename = URLEncoder.encode(nodePath.substring(lastSlash + 1), "UTF-8").replace("+", "%20");
//                     url = "https://" + publicIp + ":" + port + "/stream/" + folder + "/" + filename + "?token=" + token;
//                 } else {
//                     String filename = URLEncoder.encode(nodePath, "UTF-8").replace("+", "%20");
//                     url = "https://" + publicIp + ":" + port + "/stream/" + filename + "?token=" + token;
//                 }
//                 playlistUrls.add(url);
//             }
//             int index = 0;
//             for (int i = 0; i < currentPlaylist.size(); i++) {
//                 if (currentPlaylist.get(i).path.equals(songPath)) {
//                     index = i;
//                     break;
//                 }
//             }
//             if (musicService.getCurrentIndex() != index || !musicService.isSamePlaylist(playlistUrls)) {
//                 musicService.setPlaylist(playlistUrls, index, isShuffle, isLoop);
//             } else {
//                 musicService.play();
//                 startProgressUpdater();
//                 updatePauseButtonAndStatus();
//             }
//             songTitle.setText(currentPlaylist.get(index).name != null ? currentPlaylist.get(index).name : songPath);
//             statusText.setText("Streaming from: " + playlistUrls.get(index));
//             showSongMetadata(playlistUrls.get(index));
//             updatePauseButtonAndStatus();
//         } catch (Exception e) {
//             statusText.setText("Error streaming song: " + e.getMessage());
//         }
//     }

//     private void showSongMetadata(String streamUrl) {
//         MediaMetadataRetriever mmr = new MediaMetadataRetriever();
//         try {
//             mmr.setDataSource(streamUrl, new HashMap<>());
//             String title = mmr.extractMetadata(MediaMetadataRetriever.METADATA_KEY_TITLE);
//             String artist = mmr.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ARTIST);
//             String album = mmr.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ALBUM);
//             String info = "";
//             if (title != null) info += "Title: " + title + "\n";
//             if (artist != null) info += "Artist: " + artist + "\n";
//             if (album != null) info += "Album: " + album + "\n";
//             songMeta.setText(info);
//         } catch (Exception e) {
//             songMeta.setText("");
//         } finally {
//             try {
//                 mmr.release();
//             } catch (IOException e) {}
//         }
//     }

//     private void fetchPlaylists() {
//         OkHttpClient client = getUnsafeOkHttpClient();
//         String url = "https://" + publicIp + ":" + port + "/playlists?token=" + token;
//         statusText.setText("Fetching playlists...");
//         Request request = new Request.Builder().url(url).build();
//         client.newCall(request).enqueue(new okhttp3.Callback() {
//             @Override
//             public void onFailure(Call call, IOException e) {
//                 runOnUiThread(() -> statusText.setText("Failed to load playlists: " + e.getMessage()));
//             }
//             @Override
//             public void onResponse(Call call, Response response) throws IOException {
//                 String body = response.body() != null ? response.body().string() : "";
//                 if (response.isSuccessful()) {
//                     runOnUiThread(() -> {
//                         try {
//                             playlists.clear();
//                             playlistNames.clear();
//                             JsonObject json = JsonParser.parseString(body).getAsJsonObject();
//                             for (String name : json.keySet()) {
//                                 playlistNames.add(name);
//                                 List<SongNode> nodes = new ArrayList<>();
//                                 for (com.google.gson.JsonElement song : json.getAsJsonArray(name)) {
//                                     String songName = song.getAsString();
//                                     String fullPath = findSongPathByName(allSongNodes, songName, "");
//                                     if (fullPath != null) {
//                                         SongNode node = new SongNode();
//                                         node.name = songName;
//                                         node.path = fullPath;
//                                         nodes.add(node);
//                                     }
//                                 }
//                                 playlists.put(name, nodes);
//                             }
//                             setupPlaylistAdapter();
//                             statusText.setText("Playlists loaded.");
//                         } catch (Exception ex) {
//                             statusText.setText("Error parsing playlists: " + ex.getMessage());
//                         }
//                     });
//                 } else {
//                     runOnUiThread(() -> statusText.setText("Failed to load playlists: HTTP " + response.code()));
//                 }
//             }
//         });
//     }

//     private void setupPlaylistAdapter() {
//         if (playlistAdapter == null) {
//             playlistAdapter = new PlaylistAdapter(playlistNames, name -> {
//                 selectedPlaylistName = name;
//                 currentPlaylist = playlists.get(name);
//                 currentSongIndex = 0;
//                 if (currentPlaylist != null && !currentPlaylist.isEmpty()) {
//                     playSong(currentPlaylist.get(currentSongIndex).path, token);
//                     playlistSongsAdapter.setSongs(currentPlaylist);
//                     playlistSongsList.setVisibility(View.VISIBLE);
//                     songList.setVisibility(View.GONE);
//                 } else {
//                     statusText.setText("Playlist is empty.");
//                     playlistSongsAdapter.setSongs(new ArrayList<>());
//                     playlistSongsList.setVisibility(View.VISIBLE);
//                     songList.setVisibility(View.GONE);
//                 }
//             });
//             playlistList.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));
//             playlistList.setAdapter(playlistAdapter);
//         } else {
//             playlistAdapter.notifyDataSetChanged();
//         }
//     }

//     private void showMainSongList() {
//         songList.setVisibility(View.VISIBLE);
//         playlistSongsList.setVisibility(View.GONE);
//     }

//     private void playNextSong() {
//         if (currentPlaylist != null && !currentPlaylist.isEmpty()) {
//             int nextIndex = -1;
//             if (isShuffle) {
//                 nextIndex = random.nextInt(currentPlaylist.size());
//                 if (currentPlaylist.size() > 1 && nextIndex == currentSongIndex) {
//                     nextIndex = (nextIndex + 1) % currentPlaylist.size();
//                 }
//             } else if (currentSongIndex < currentPlaylist.size() - 1) {
//                 nextIndex = currentSongIndex + 1;
//             } else if (isLoop) {
//                 nextIndex = 0;
//             } else {
//                 return;
//             }
//             currentSongIndex = nextIndex;
//             playSong(currentPlaylist.get(currentSongIndex).path, token);
//         }
//     }

//     private void playPreviousSong() {
//         if (currentPlaylist != null && !currentPlaylist.isEmpty()) {
//             if (isShuffle) {
//                 int prevIndex = random.nextInt(currentPlaylist.size());
//                 if (currentPlaylist.size() > 1 && prevIndex == currentSongIndex) {
//                     prevIndex = (prevIndex + 1) % currentPlaylist.size();
//                 }
//                 currentSongIndex = prevIndex;
//             } else if (currentSongIndex > 0) {
//                 currentSongIndex--;
//             } else if (isLoop) {
//                 currentSongIndex = currentPlaylist.size() - 1;
//             } else {
//                 return;
//             }
//             playSong(currentPlaylist.get(currentSongIndex).path, token);
//         }
//     }

//     private String findSongPathByName(List<SongNode> nodes, String songName, String currentPath) {
//         for (SongNode node : nodes) {
//             String nodePath = currentPath.isEmpty() ? node.name : currentPath + "/" + node.name;
//             if (node.children != null && !node.children.isEmpty()) {
//                 String found = findSongPathByName(node.children, songName, nodePath);
//                 if (found != null) return found;
//             } else {
//                 if (node.name.equals(songName) || nodePath.equals(songName) || nodePath.endsWith("/" + songName)) {
//                     return nodePath;
//                 }
//             }
//         }
//         return null;
//     }

//     public OkHttpClient getUnsafeOkHttpClient() {
//         try {
//             TrustManager[] trustAllCerts = new TrustManager[]{
//                     new X509TrustManager() {
//                         @Override public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {}
//                         @Override public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {}
//                         @Override public java.security.cert.X509Certificate[] getAcceptedIssuers() { return new java.security.cert.X509Certificate[]{}; }
//                     }
//             };

//             SSLContext sslContext = SSLContext.getInstance("SSL");
//             sslContext.init(null, trustAllCerts, new java.security.SecureRandom());
//             SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();

//             OkHttpClient.Builder builder = new OkHttpClient.Builder();
//             builder.sslSocketFactory(sslSocketFactory, (X509TrustManager)trustAllCerts[0]);
//             builder.hostnameVerifier((hostname, session) -> true);

//             return builder.build();
//         } catch (Exception e) {
//             throw new RuntimeException(e);
//         }
//     }

//     private void startProgressUpdater() {
//         progressHandler.removeCallbacksAndMessages(null);
//         progressRunnable = new Runnable() {
//             @Override
//             public void run() {
//                 if (serviceBound && musicService != null && musicService.isPlaying()) {
//                     int pos = musicService.getCurrentPosition();
//                     int dur = musicService.getDuration();
//                     progressBar.setMax(dur);
//                     progressBar.setProgress(pos);
//                     currentTime.setText(formatTime(pos));
//                     totalTime.setText(formatTime(dur));
//                     pauseButton.setImageResource(android.R.drawable.ic_media_pause);
//                     statusText.setText("Status: Playing");
//                     progressHandler.postDelayed(this, 500);
//                 } else {
//                     pauseButton.setImageResource(android.R.drawable.ic_media_play);
//                     statusText.setText("Status: Paused");
//                 }
//             }
//         };
//         progressHandler.post(progressRunnable);
//     }

//     private String formatTime(int millis) {
//         int seconds = millis / 1000;
//         int minutes = seconds / 60;
//         seconds = seconds % 60;
//         return String.format(Locale.getDefault(), "%02d:%02d", minutes, seconds);
//     }
// }